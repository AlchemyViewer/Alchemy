/*
 * @file llpanelprofilelegacy.h
 * @brief Legacy protocol avatar profile panel
 *
 * Copyright (c) 2014-2024, Cinder Roxley <cinder@sdf.org>
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef LL_PANELPROFILELEGACY_H
#define LL_PANELPROFILELEGACY_H

#include "llgroupmgr.h"
#include "llpanelavatarlegacy.h"

class LLAvatarName;
class LLClassifiedItem;
class LLFlatListView;
class LLPanel;
class LLPanelPickEdit;
class LLPanelPickInfo;
class LLPanelClassifiedInfo;
class LLPanelClassifiedEdit;
class LLPickItem;
class LLProfileImageCtrl;
class LLTextBase;
class LLToggleableMenu;

class LLPanelProfileLegacy final : public LLPanelProfileLegacyTab
{
public:
    LLPanelProfileLegacy();
    BOOL postBuild() override;
    void onOpen(const LLSD& key) override;
    void reshape(S32 width, S32 height, BOOL called_from_parent = TRUE) override;
    void showTab(std::string_view name, bool show) const;
    LLPanel* expandTab(const std::string& name) const;
    LLPanel* getExpandedTab() const;

protected:
    void openPanel(LLPanel* panel, const LLSD& params);
    void closePanel(LLPanel* panel);

private:
    ~LLPanelProfileLegacy() override;
    void updateData() override;
    void processProperties(void* data, EAvatarProcessorType type) override;
    void resetControls() override;
    void resetInterestsControlValues();
    void setProgress(bool started);
    void sendAvatarProfileCoro(std::string url, LLSD payload);
    void onAvatarNameCache(const LLUUID& agent_id, const LLAvatarName& av_name);
    void onCommitAvatarProperties();
    void onCommitInterest();
    void onCommitNotes(LLUICtrl* ctrl);
    void onDoubleClickName();
    void onCommitRights();
    void onBackBtnClick();
    void onCommitModifyObjectsRights(LLUICtrl* ctrl);
    void onCommitImageAction(LLUICtrl* ctrl, const LLSD& userdata);
    void onCommitAction(const LLSD& userdata);
    void onNameChanged();
    void onCommitUploadImage(LLProfileImageCtrl* ctrl);
    void onCommitChangeImage(LLProfileImageCtrl* ctrl);
    void onCommitRemoveImage(LLProfileImageCtrl* ctrl);
    void onProfileImageChanged(const LLUUID& id, LLProfileImageCtrl* ctrl);
    bool isActionEnabled(const LLSD& userdata);
    bool handleConfirmModifyRightsCallback(const LLSD& notification, const LLSD& response);
    void onCommitRightClickProfileImage(LLUICtrl* item, S32 x, S32 y, MASK mask);
    void onCommitZoomProfileImage(LLUICtrl* item, S32 x, S32 y, MASK mask);
    void closeParentFloater();

    boost::signals2::connection mAvatarNameCacheConnection;
    boost::signals2::connection mNameChangedConnection;
    LLHandle<LLView>            mPopupMenuHandle;
    LLHandle<LLFloater>         mTexturePicker;
    LLHandle<LLFloater>         mProfileSnooper;

    class ChildStack
    {
    public:
        ChildStack();
        ~ChildStack();
        void setParent(LLPanel* parent);

        bool push();
        bool pop();
        void preParentReshape();
        void postParentReshape();

    private:
        void dump();

        typedef LLView::child_list_t view_list_t;
        typedef std::list<view_list_t> stack_t;

        stack_t     mStack;
        stack_t     mSavedStack;
        LLPanel*    mParent;
    };
    ChildStack      mChildStack;

public:
    class LLPanelProfilePicks final : public LLPanelProfileLegacyTab
    {
        friend class LLPanelProfileLegacy;
    public:
        LLPanelProfilePicks();
        ~LLPanelProfilePicks() override;
        BOOL postBuild() override;

        void createNewPick();
        void createNewClassified();

    protected:
        void onOpen(const LLSD& key) override;

    private:
        void updateData() override;
        void processProperties(void* data, EAvatarProcessorType type) override;
        void processPick(LLAvatarData::pick_data_t const& pick);
        void resetControls() override {};
        void showAccordion(const std::string& name, bool show);
        void setProfilePanel(LLPanelProfileLegacy* profile_panel);
        LLPanelProfileLegacy* getProfilePanel() const;
        void onPanelPickClose(LLPanel* panel);
        void onPanelPickSave(LLPanel* panel);
        void onPanelPickEditSave(LLPanelPickEdit* panel);
        void onPanelEdit();
        void onPanelClassifiedEdit();
        void onPanelPickEdit();
        void onPlusMenuItemClicked(const LLSD& param);
        void editClassified(const LLUUID& classified_id);
        void updateButtons() override;
        void onClickPlusBtn();
        void onClickInfo();
        void onClickTeleport();
        void onClickShowOnMap();
        void onClickDelete();
        void openPickInfo();
        void openClassifiedInfo();
        void onPanelClassifiedSave(LLPanelClassifiedEdit* panel);
        void onPanelClassifiedClose(LLPanelClassifiedInfo* panel);
        void onDoubleClickClassifiedItem(LLUICtrl* item);
        LLClassifiedItem* findClassifiedById(const LLUUID& classified_id) const;
        LLClassifiedItem* getSelectedClassifiedItem() const;
        LLPickItem* getSelectedPickItem() const;

        void createPickEditPanel();
        void createClassifiedEditPanel(LLPanelClassifiedEdit** panel);

        bool isActionEnabled(const LLSD& userdata) const;
        bool callbackDeletePick(const LLSD& notification, const LLSD& response);
        bool callbackDeleteClassified(const LLSD& notification, const LLSD& response);
        bool callbackTeleport(const LLSD& notification, const LLSD& response);
        virtual void onRightMouseUpItem(LLUICtrl* item, S32 x, S32 y, MASK mask);

        LLPanelProfileLegacy* mProfilePanel;
        LLFlatListView* mClassifiedsList;
        LLFlatListView* mPicksList;
        LLPanelPickEdit* mPanelPickEdit;
        LLPanelPickInfo* mPanelPickInfo;
        LLPanelClassifiedInfo* mPanelClassifiedInfo;
        LLHandle<LLView> mPopupMenuHandle;
        LLHandle<LLToggleableMenu> mPlusMenuHandle;

        // This map is needed for newly created classifieds. The purpose of panel is to
        // sit in this map and listen to LLPanelClassifiedEdit::processProperties callback.
        std::map<LLUUID, LLPanelClassifiedEdit*> mEditClassifiedPanels;
    };

    class LLPanelProfileGroups final : public LLPanelProfileLegacyTab
    {
        friend class LLPanelProfileLegacy;
    public:
        LLPanelProfileGroups();
        BOOL postBuild() override;

    protected:
        void onOpen(const LLSD& key) override;

    private:
        void updateData() override;
        void processProperties(void* data, EAvatarProcessorType type) override;
        void resetControls() override {};
        void showGroup(const LLUUID& id);

        LLTextBase* mGroupsText;
        LLFlatListView* mGroupsList;
    };

    class LLProfileGroupItem final : public LLPanel, public LLGroupMgrObserver
    {
      public:
        LLProfileGroupItem();
        ~LLProfileGroupItem() override;
        static LLProfileGroupItem* create();
        void                       init(const LLAvatarGroups::LLGroupData& data);
        BOOL                       postBuild() override;

        void setValue(const LLSD& value) override;
        void setId(const LLUUID& id);
        void setInsignia(const LLUUID& id);
        void setGroupName(const std::string& name);
        void setCharter(const std::string& charter);

      protected:
        void changed(LLGroupChange gc) override;

      private:
        LLUUID      mInsignia;
        std::string mGroupName;
        std::string mCharter;
    };

private:
    LLPanelProfilePicks* mPanelPicks;
    LLPanelProfileGroups* mPanelGroups;
};

#endif //LL_PANELPROFILELEGACY_H
