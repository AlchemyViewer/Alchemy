/*
 * @file llfloaterprofilelegacy.cpp
 * @brief Floater that holds panel don't bitch about it, Dog; Merging is easy.
 *
 * Copyright (c) 2017-2022, Cinder Roxley <cinder@sdf.org>
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#include "llviewerprecompiledheaders.h"
#include "llfloaterprofilelegacy.h"

#include "llavatarname.h"
#include "llavatarnamecache.h"
#include "llpanelprofilelegacy.h"

LLFloaterProfileLegacy::LLFloaterProfileLegacy(LLSD const& key)
:   LLFloater(key)
{

}

LLFloaterProfileLegacy::~LLFloaterProfileLegacy()
{
    if (mAvatarNameCacheConnection.connected())
        mAvatarNameCacheConnection.disconnect();
}

BOOL LLFloaterProfileLegacy::postBuild()
{
    mPanel = dynamic_cast<LLPanelProfileLegacy*>(getChild<LLPanel>("panel_profile_legacy_sidetray"));
    return TRUE;
}

void LLFloaterProfileLegacy::onOpen(const LLSD& key)
{
    if (!key.has("avatar_id")) return;
    const LLUUID av_id = key["avatar_id"].asUUID();

    mAvatarNameCacheConnection = LLAvatarNameCache::get(av_id,
        boost::bind(&LLFloaterProfileLegacy::onAvatarNameCache, this, _1, _2));

    if (mPanel) { mPanel->onOpen(key); }
}

void LLFloaterProfileLegacy::onAvatarNameCache(const LLUUID& agent_id, const LLAvatarName& av_name)
{
    setTitle(av_name.getCompleteName());
    mAvatarNameCacheConnection.disconnect();
}

LLPanel* LLFloaterProfileLegacy::expandTab(const std::string& name) const
{
    return mPanel != nullptr ? mPanel->expandTab(name) : nullptr;
}

LLPanel* LLFloaterProfileLegacy::getExpandedTab() const
{
    return mPanel != nullptr ? mPanel->getExpandedTab() : nullptr;
}
