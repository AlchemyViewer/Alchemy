/*
 * @file llpanelsearchevents.cpp
 * @brief Events search panel
 *
 * Copyright (c) 2014, Cinder Roxley <cinder@sdf.org>
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#include "llviewerprecompiledheaders.h"
#include "llpanelsearchevents.h"
#include "llfloaterdirectory.h"

#include "llfloaterreg.h"
#include "llqueryflags.h"

#include "llagent.h"
#include "llcombobox.h"
#include "llnotificationsutil.h"
#include "llparcel.h"
#include "llsearcheditor.h"
#include "llsearchhistory.h"

static LLPanelInjector<LLPanelSearchEvents> t_panel_search_events("panel_search_events");

LLPanelSearchEvents::LLPanelSearchEvents()
:   LLPanelSearch()
,   mDate(0)
{
    mCommitCallbackRegistrar.add("Search.query", boost::bind(&LLPanelSearchEvents::onCommitSearch, this, _1));
    mCommitCallbackRegistrar.add("Search.AddDay", boost::bind(&LLPanelSearchEvents::addDay, this));
    mCommitCallbackRegistrar.add("Search.MinusDay", boost::bind(&LLPanelSearchEvents::minusDay, this));
}

BOOL LLPanelSearchEvents::postBuild()
{
    mSearchEditor = getChild<LLSearchEditor>("search_bar");
    //mSearchEditor->setKeystrokeCallback(boost::bind(&LLPanelSearchEvents::onCommitSearch, this, _1));
    setDate(0);

    return TRUE;
}

void LLPanelSearchEvents::onCommitSearch(LLUICtrl* ctrl)
{
    LLSearchEditor* pSearchEditor = dynamic_cast<LLSearchEditor*>(ctrl);
    if (pSearchEditor)
    {
        std::string text = pSearchEditor->getText();
        LLStringUtil::trim(text);
        if (text.length() <= MIN_SEARCH_STRING_SIZE)
            LLSearchHistory::getInstance()->addEntry(text);
    }
    search();
}

void LLPanelSearchEvents::search()
{
    LLDirQuery query;
    query.type = SE_EVENTS;
    query.results_per_page = 200;
    std::string text = mSearchEditor->getText();
    LLStringUtil::trim(text);

    static LLUICachedControl<bool> inc_pg("ShowPGEvents", true);
    static LLUICachedControl<bool> inc_mature("ShowMatureEvents", false);
    static LLUICachedControl<bool> inc_adult("ShowAdultEvents", false);
    if (!(inc_pg || inc_mature || inc_adult))
    {
        LLNotificationsUtil::add("NoContentToSearch");
        return;
    }

    query.scope = DFQ_DATE_EVENTS;
    if (inc_pg)
        query.scope |= DFQ_INC_PG;
    if (inc_mature && gAgent.canAccessMature())
        query.scope |= DFQ_INC_MATURE;
    if (inc_adult && gAgent.canAccessAdult())
        query.scope |= DFQ_INC_ADULT;

    std::ostringstream string;
    string << (childGetValue("events_search_mode").asString() == "current" ? "u" : llformat("%d",mDate)) << "|"
           << getChild<LLComboBox>("events_category")->getSelectedValue().asInteger() << "|"
           << text;
    query.text = string.str();

    mFloater->queryDirectory(query, true);
}

void LLPanelSearchEvents::setDate(S32 day)
{
    mDate = day;

    time_t utc = time_corrected();
    utc += day * 24 * 60 * 60;
    struct tm * internal_time = utc_to_pacific_time(utc, is_daylight_savings());
    const std::string date = llformat("%d/%d", 1 + internal_time->tm_mon, internal_time->tm_mday);
    childSetValue("events_date", date);
}

void LLPanelSearchEvents::addDay()
{
    setDate(++mDate);
    if (childGetValue("events_search_mode").asString() == "date")
        search();
}

void LLPanelSearchEvents::minusDay()
{
    setDate(--mDate);
    if (childGetValue("events_search_mode").asString() == "date")
        search();
}
